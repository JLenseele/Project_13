# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  python: circleci/python@2.1.1
  aws-ecr: circleci/aws-ecr@8.2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:

  build-and-test:
    executor: python/default
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run tests
          command: pytest
      - run:
          name: Linting
          command: flake8

  build-docker-image:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build
          command: docker build -t oc_lettings_docker_build .

  push-image-dockerhub:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Login to DockerHub
          command: docker login -u $DH_username -p $DH_password
      - run:
          name: Link to DockerHub
          command: docker tag oc_lettings_docker_build:latest $DH_username/oc_lettings_docker_build:latest
      - run:
          name: push Docker image
          command: docker push $DH_username/oc_lettings_docker_build:latest

  deploy-to-aws:
    executor: aws-ecr/default
    steps:
      - checkout
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
      - heroku/install

      run:
        name: Deploy to Heroku
        command: |
          docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD
          docker image pull $DOCKERHUB_USERNAME/oc_lettings:$CIRCLE_SHA1
          AWS_API_KEY=${HEROKU_API_KEY} heroku container:login
          docker tag $DOCKERHUB_USERNAME/oc_lettings:$CIRCLE_SHA1 registry.heroku.com/$HEROKU_APP_NAME/web
          docker push registry.heroku.com/$HEROKU_APP_NAME/web
          heroku container:release web --app $HEROKU_APP_NAME
            

workflows:
  test_linting_build_deploy: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      - build-docker-image:
          requires:
            - build-and-test
      - push-image-dockerhub:
          context: OCP13_context
          requires:
            - build-docker-image
